{"/home/travis/build/npmtest/node-npmtest-epub/test.js":"/* istanbul instrument in package npmtest_epub */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-epub/lib.npmtest_epub.js":"/* istanbul instrument in package npmtest_epub */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_epub = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_epub = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-epub/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-epub && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_epub */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_epub\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_epub.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_epub.rollup.js'] =\n            local.assetsDict['/assets.npmtest_epub.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_epub.__dirname + '/lib.npmtest_epub.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-epub/node_modules/epub/epub.js":"var XML2JS = require(\"xml2js\").Parser;\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\ntry {\n    // zipfile is an optional dependency:\n    var ZipFile = require(\"zipfile\").ZipFile;\n} catch (err) {\n    // Mock zipfile using pure-JS adm-zip:\n    var AdmZip = require('adm-zip');\n    \n    var ZipFile = function(filename) {\n        this.admZip = new AdmZip(filename);\n        this.names = this.admZip.getEntries().map(function(zipEntry) {\n            return zipEntry.entryName;\n        });\n        this.count = this.names.length;\n    };\n    ZipFile.prototype.readFile = function(name, cb) {\n        this.admZip.readFileAsync(this.admZip.getEntry(name), function(buffer, error) {\n            // `error` is bogus right now, so let's just drop it.\n            // see https://github.com/cthackers/adm-zip/pull/88\n            return cb(null, buffer);\n        });\n    };\n}\n\n//TODO: Cache parsed data\n\n/**\n *  new EPub(fname[, imageroot][, linkroot])\n *  - fname (String): filename for the ebook\n *  - imageroot (String): URL prefix for images\n *  - linkroot (String): URL prefix for links\n *\n *  Creates an Event Emitter type object for parsing epub files\n *\n *      var epub = new EPub(\"book.epub\");\n *      epub.on(\"end\", function () {\n *           console.log(epub.spine);\n *      });\n *      epub.on(\"error\", function (error) { ... });\n *      epub.parse();\n *\n *  Image and link URL format is:\n *\n *      imageroot + img_id + img_zip_path\n *\n *  So an image \"logo.jpg\" which resides in \"OPT/\" in the zip archive\n *  and is listed in the manifest with id \"logo_img\" will have the\n *  following url (providing that imageroot is \"/images/\"):\n *\n *      /images/logo_img/OPT/logo.jpg\n **/\nfunction EPub(fname, imageroot, linkroot) {\n    EventEmitter.call(this);\n    this.filename = fname;\n\n    this.imageroot = (imageroot || \"/images/\").trim();\n    this.linkroot = (linkroot || \"/links/\").trim();\n\n    if (this.imageroot.substr(-1) != \"/\") {\n        this.imageroot += \"/\";\n    }\n    if (this.linkroot.substr(-1) != \"/\") {\n        this.linkroot += \"/\";\n    }\n}\nutil.inherits(EPub, EventEmitter);\n\n/**\n *  EPub#parse() -> undefined\n *\n *  Starts the parser, needs to be called by the script\n **/\nEPub.prototype.parse = function () {\n\n    this.containerFile = false;\n    this.mimeFile = false;\n    this.rootFile = false;\n\n    this.metadata = {};\n    this.manifest = {};\n    this.spine    = {toc: false, contents: []};\n    this.flow = [];\n    this.toc = [];\n\n    this.open();\n};\n\n/**\n *  EPub#open() -> undefined\n *\n *  Opens the epub file with Zip unpacker, retrieves file listing\n *  and runs mime type check\n **/\nEPub.prototype.open = function () {\n    try {\n        this.zip = new ZipFile(this.filename);\n    } catch (E) {\n        this.emit(\"error\", new Error(\"Invalid/missing file\"));\n        return;\n    }\n\n    if (!this.zip.names || !this.zip.names.length) {\n        this.emit(\"error\", new Error(\"No files in archive\"));\n        return;\n    }\n\n    this.checkMimeType();\n};\n\n/**\n *  EPub#checkMimeType() -> undefined\n *\n *  Checks if there's a file called \"mimetype\" and that it's contents\n *  are \"application/epub+zip\". On success runs root file check.\n **/\nEPub.prototype.checkMimeType = function () {\n    var i, len;\n\n    for (i = 0, len = this.zip.names.length; i < len; i++) {\n        if (this.zip.names[i].toLowerCase() == \"mimetype\") {\n            this.mimeFile = this.zip.names[i];\n            break;\n        }\n    }\n    if (!this.mimeFile) {\n        this.emit(\"error\", new Error(\"No mimetype file in archive\"));\n        return;\n    }\n    this.zip.readFile(this.mimeFile, (function (err, data) {\n        if (err) {\n            this.emit(\"error\", new Error(\"Reading archive failed\"));\n            return;\n        }\n        var txt = data.toString(\"utf-8\").toLowerCase().trim();\n\n        if (txt  !=  \"application/epub+zip\") {\n            this.emit(\"error\", new Error(\"Unsupported mime type\"));\n            return;\n        }\n\n        this.getRootFiles();\n    }).bind(this));\n};\n\n/**\n *  EPub#getRootFiles() -> undefined\n *\n *  Looks for a \"meta-inf/container.xml\" file and searches for a\n *  rootfile element with mime type \"application/oebps-package+xml\".\n *  On success calls the rootfile parser\n **/\nEPub.prototype.getRootFiles = function () {\n    var i, len;\n    for (i = 0, len = this.zip.names.length; i < len; i++) {\n        if (this.zip.names[i].toLowerCase() == \"meta-inf/container.xml\") {\n            this.containerFile = this.zip.names[i];\n            break;\n        }\n    }\n    if (!this.containerFile) {\n        this.emit(\"error\", new Error(\"No container file in archive\"));\n        return;\n    }\n\n    this.zip.readFile(this.containerFile, (function (err, data) {\n        if (err) {\n            this.emit(\"error\", new Error(\"Reading archive failed\"));\n            return;\n        }\n        var xml = data.toString(\"utf-8\").toLowerCase().trim(),\n            xmlparser = new XML2JS();\n\n        xmlparser.on(\"end\", (function (result) {\n\n            if (!result.rootfiles || !result.rootfiles.rootfile) {\n                this.emit(\"error\", new Error(\"No rootfiles found\"));\n                return;\n            }\n\n            var rootfile = result.rootfiles.rootfile,\n                filename = false, i, len;\n\n            if (Array.isArray(rootfile)) {\n\n                for (i = 0, len = rootfile.length; i < len; i++) {\n                    if (rootfile[i][\"@\"][\"media-type\"] &&\n                            rootfile[i][\"@\"][\"media-type\"] == \"application/oebps-package+xml\" &&\n                            rootfile[i][\"@\"][\"full-path\"]) {\n                        filename = rootfile[i][\"@\"][\"full-path\"].toLowerCase().trim();\n                        break;\n                    }\n                }\n\n            } else if (rootfile[\"@\"]) {\n                if (rootfile[\"@\"][\"media-type\"]  !=  \"application/oebps-package+xml\" || !rootfile[\"@\"][\"full-path\"]) {\n                    this.emit(\"error\", new Error(\"Rootfile in unknown format\"));\n                    return;\n                }\n                filename = rootfile[\"@\"][\"full-path\"].toLowerCase().trim();\n            }\n\n            if (!filename) {\n                this.emit(\"error\", new Error(\"Empty rootfile\"));\n                return;\n            }\n\n\n            for (i = 0, len = this.zip.names.length; i < len; i++) {\n                if (this.zip.names[i].toLowerCase() == filename) {\n                    this.rootFile = this.zip.names[i];\n                    break;\n                }\n            }\n\n            if (!this.rootFile) {\n                this.emit(\"error\", new Error(\"Rootfile not found from archive\"));\n                return;\n            }\n\n            this.handleRootFile();\n\n        }).bind(this));\n\n        xmlparser.on(\"error\", (function (err) {\n            this.emit(\"error\", new Error(\"Parsing container XML failed\"));\n            return;\n        }).bind(this));\n\n        xmlparser.parseString(xml);\n\n\n    }).bind(this));\n};\n\n/**\n *  EPub#handleRootFile() -> undefined\n *\n *  Parses the rootfile XML and calls rootfile parser\n **/\nEPub.prototype.handleRootFile = function () {\n\n    this.zip.readFile(this.rootFile, (function (err, data) {\n        if (err) {\n            this.emit(\"error\", new Error(\"Reading archive failed\"));\n            return;\n        }\n        var xml = data.toString(\"utf-8\"),\n            xmlparser = new XML2JS();\n\n        xmlparser.on(\"end\", this.parseRootFile.bind(this));\n\n        xmlparser.on(\"error\", (function (err) {\n            this.emit(\"error\", new Error(\"Parsing container XML failed\"));\n            return;\n        }).bind(this));\n\n        xmlparser.parseString(xml);\n\n    }).bind(this));\n};\n\n/**\n *  EPub#parseRootFile() -> undefined\n *\n *  Parses elements \"metadata,\" \"manifest,\" \"spine\" and TOC.\n *  Emits \"end\" if no TOC\n **/\nEPub.prototype.parseRootFile = function (rootfile) {\n\n    this.version = rootfile['@'].version || '2.0';\n\n    var i, len, keys, keyparts, key;\n    keys = Object.keys(rootfile);\n    for (i = 0, len = keys.length; i < len; i++) {\n        keyparts = keys[i].split(\":\");\n        key = (keyparts.pop() || \"\").toLowerCase().trim();\n        switch (key) {\n        case \"metadata\":\n            this.parseMetadata(rootfile[keys[i]]);\n            break;\n        case \"manifest\":\n            this.parseManifest(rootfile[keys[i]]);\n            break;\n        case \"spine\":\n            this.parseSpine(rootfile[keys[i]]);\n            break;\n        case \"guide\":\n            //this.parseGuide(rootfile[keys[i]]);\n            break;\n        }\n    }\n\n    if (this.spine.toc) {\n        this.parseTOC();\n    } else {\n        this.emit(\"end\");\n    }\n};\n\n/**\n *  EPub#parseMetadata() -> undefined\n *\n *  Parses \"metadata\" block (book metadata, title, author etc.)\n **/\nEPub.prototype.parseMetadata = function (metadata) {\n    var i, j, len, keys, keyparts, key;\n\n    keys = Object.keys(metadata);\n    for (i = 0, len = keys.length; i < len; i++) {\n        keyparts = keys[i].split(\":\");\n        key = (keyparts.pop() || \"\").toLowerCase().trim();\n        switch (key) {\n        case \"publisher\":\n            if (Array.isArray(metadata[keys[i]])) {\n                this.metadata.publisher = String(metadata[keys[i]][0] && metadata[keys[i]][0][\"#\"] || metadata[keys[i]][0] || \"\").trim();\n            } else {\n                this.metadata.publisher = String(metadata[keys[i]][\"#\"] || metadata[keys[i]] || \"\").trim();\n            }\n            break;\n        case \"language\":\n            if (Array.isArray(metadata[keys[i]])) {\n                this.metadata.language = String(metadata[keys[i]][0] && metadata[keys[i]][0][\"#\"] || metadata[keys[i]][0] || \"\").toLowerCase().trim();\n            } else {\n                this.metadata.language = String(metadata[keys[i]][\"#\"] || metadata[keys[i]] || \"\").toLowerCase().trim();\n            }\n            break;\n        case \"title\":\n            if (Array.isArray(metadata[keys[i]])) {\n                this.metadata.title = String(metadata[keys[i]][0] && metadata[keys[i]][0][\"#\"] || metadata[keys[i]][0] || \"\").trim();\n            } else {\n                this.metadata.title = String(metadata[keys[i]][\"#\"] || metadata[keys[i]] || \"\").trim();\n            }\n            break;\n        case \"subject\":\n            if (Array.isArray(metadata[keys[i]])) {\n                this.metadata.subject = String(metadata[keys[i]][0] && metadata[keys[i]][0][\"#\"] || metadata[keys[i]][0] || \"\").trim();\n            } else {\n                this.metadata.subject = String(metadata[keys[i]][\"#\"] || metadata[keys[i]] || \"\").trim();\n            }\n            break;\n        case \"description\":\n            if (Array.isArray(metadata[keys[i]])) {\n                this.metadata.description = String(metadata[keys[i]][0] && metadata[keys[i]][0][\"#\"] || metadata[keys[i]][0] || \"\").trim();\n            } else {\n                this.metadata.description = String(metadata[keys[i]][\"#\"] || metadata[keys[i]] || \"\").trim();\n            }\n            break;\n        case \"creator\":\n            if (Array.isArray(metadata[keys[i]])) {\n                this.metadata.creator = String(metadata[keys[i]][0] && metadata[keys[i]][0][\"#\"] || metadata[keys[i]][0] || \"\").trim();\n                this.metadata.creatorFileAs = String(metadata[keys[i]][0] && metadata[keys[i]][0]['@'] && metadata[keys[i]][0]['@'][\"opf:file-as\"] || this.metadata.creator).trim();\n            } else {\n                this.metadata.creator = String(metadata[keys[i]][\"#\"] || metadata[keys[i]] || \"\").trim();\n                this.metadata.creatorFileAs = String(metadata[keys[i]]['@'] && metadata[keys[i]]['@'][\"opf:file-as\"] || this.metadata.creator).trim();\n            }\n            break;\n        case \"date\":\n            if (Array.isArray(metadata[keys[i]])) {\n                this.metadata.date = String(metadata[keys[i]][0] && metadata[keys[i]][0][\"#\"] || metadata[keys[i]][0] || \"\").trim();\n            } else {\n                this.metadata.date = String(metadata[keys[i]][\"#\"] || metadata[keys[i]] || \"\").trim();\n            }\n            break;\n        case \"identifier\":\n            if (metadata[keys[i]][\"@\"] && metadata[keys[i]][\"@\"][\"opf:scheme\"] == \"ISBN\") {\n                this.metadata.ISBN = String(metadata[keys[i]][\"#\"] || \"\").trim();\n            } else if (metadata[keys[i]][\"@\"] && metadata[keys[i]][\"@\"].id && metadata[keys[i]][\"@\"].id.match(/uuid/i)) {\n                this.metadata.UUID = String(metadata[keys[i]][\"#\"] || \"\").replace('urn:uuid:', '').toUpperCase().trim();\n            } else if (Array.isArray(metadata[keys[i]])) {\n                for (j = 0; j < metadata[keys[i]].length; j++) {\n                    if (metadata[keys[i]][j][\"@\"]) {\n                        if (metadata[keys[i]][j][\"@\"][\"opf:scheme\"] == \"ISBN\") {\n                            this.metadata.ISBN = String(metadata[keys[i]][j][\"#\"] || \"\").trim();\n                        } else if (metadata[keys[i]][j][\"@\"].id && metadata[keys[i]][j][\"@\"].id.match(/uuid/i)) {\n                            this.metadata.UUID = String(metadata[keys[i]][j][\"#\"] || \"\").replace('urn:uuid:', '').toUpperCase().trim();\n                        }\n                    }\n                }\n            }\n            break;\n        }\n    }\n    \n    var metas = metadata['meta'] || {};\n    Object.keys(metas).forEach(function(key) {\n        var meta = metas[key];\n        if (meta['@'] && meta['@'].name) {\n            var name = meta['@'].name;\n            this.metadata[name] = meta['@'].content;\n        }\n        if (meta['#'] && meta['@'].property) {\n            this.metadata[meta['@'].property] = meta['#'];\n        }\n    }, this);\n};\n\n/**\n *  EPub#parseManifest() -> undefined\n *\n *  Parses \"manifest\" block (all items included, html files, images, styles)\n **/\nEPub.prototype.parseManifest = function (manifest) {\n    var i, len, path = this.rootFile.split(\"/\"), element, path_str;\n    path.pop();\n    path_str = path.join(\"/\");\n\n    if (manifest.item) {\n        for (i = 0, len = manifest.item.length; i < len; i++) {\n            if (manifest.item[i]['@']) {\n                element = manifest.item[i]['@'];\n\n                if (element.href && element.href.substr(0, path_str.length)  !=  path_str) {\n                    element.href = path.concat([element.href]).join(\"/\");\n                }\n\n                this.manifest[manifest.item[i]['@'].id] = element;\n\n            }\n        }\n    }\n};\n\n/**\n *  EPub#parseSpine() -> undefined\n *\n *  Parses \"spine\" block (all html elements that are shown to the reader)\n **/\nEPub.prototype.parseSpine = function (spine) {\n    var i, len, path = this.rootFile.split(\"/\"), element;\n    path.pop();\n\n    if (spine['@'] && spine['@'].toc) {\n        this.spine.toc = this.manifest[spine['@'].toc] || false;\n    }\n\n    if (spine.itemref) {\n        if(!Array.isArray(spine.itemref)){\n            spine.itemref = [spine.itemref];\n        }\n        for (i = 0, len = spine.itemref.length; i < len; i++) {\n            if (spine.itemref[i]['@']) {\n                if (element = this.manifest[spine.itemref[i]['@'].idref]) {\n                    this.spine.contents.push(element);\n                }\n            }\n        }\n    }\n    this.flow = this.spine.contents;\n};\n\n/**\n *  EPub#parseTOC() -> undefined\n *\n *  Parses ncx file for table of contents (title, html file)\n **/\nEPub.prototype.parseTOC = function () {\n    var i, len, path = this.spine.toc.href.split(\"/\"), id_list = {}, keys;\n    path.pop();\n\n    keys = Object.keys(this.manifest);\n    for (i = 0, len = keys.length; i < len; i++) {\n        id_list[this.manifest[keys[i]].href] = keys[i];\n    }\n\n    this.zip.readFile(this.spine.toc.href, (function (err, data) {\n        if (err) {\n            this.emit(\"error\", new Error(\"Reading archive failed\"));\n            return;\n        }\n        var xml = data.toString(\"utf-8\"),\n            xmlparser = new XML2JS();\n\n        xmlparser.on(\"end\", (function (result) {\n            if (result.navMap && result.navMap.navPoint) {\n                this.toc = this.walkNavMap(result.navMap.navPoint, path, id_list);\n            }\n\n            this.emit(\"end\");\n        }).bind(this));\n\n        xmlparser.on(\"error\", (function (err) {\n            this.emit(\"error\", new Error(\"Parsing container XML failed\"));\n            return;\n        }).bind(this));\n\n        xmlparser.parseString(xml);\n\n    }).bind(this));\n};\n\n/**\n *  EPub#walkNavMap(branch, path, id_list,[, level]) -> Array\n *  - branch (Array | Object): NCX NavPoint object\n *  - path (Array): Base path\n *  - id_list (Object): map of file paths and id values\n *  - level (Number): deepness\n *\n *  Walks the NavMap object through all levels and finds elements\n *  for TOC\n **/\nEPub.prototype.walkNavMap = function (branch, path, id_list, level) {\n    level = level || 0;\n\n    // don't go too far\n    if (level > 7) {\n        return [];\n    }\n\n    var i, len, output = [], element, title, order, href;\n\n    if (!Array.isArray(branch)) {\n        branch = [branch];\n    }\n\n    for (i = 0, len = branch.length; i < len; i++) {\n        if (branch[i].navLabel) {\n\n            title = (branch[i].navLabel && branch[i].navLabel.text || branch[i].navLabel || \"\").trim();\n            order = Number(branch[i][\"@\"] && branch[i][\"@\"].playOrder || 0);\n            href = (branch[i].content && branch[i].content[\"@\"] && branch[i].content[\"@\"].src || \"\").trim();\n\n            element = {\n                level: level,\n                order: order,\n                title: title\n            };\n\n            if (href) {\n                href = path.concat([href]).join(\"/\");\n                element.href = href;\n\n                if (id_list[element.href]) {\n                    // link existing object\n                    element = this.manifest[id_list[element.href]];\n                    element.title = title;\n                    element.order = order;\n                    element.level = level;\n                } else {\n                    // use new one\n                    element.href = href;\n                    element.id =  (branch[i][\"@\"] && branch[i][\"@\"].id || \"\").trim();\n                }\n\n                output.push(element);\n            }\n        }\n        if (branch[i].navPoint) {\n            output = output.concat(this.walkNavMap(branch[i].navPoint, path, id_list, level + 1));\n        }\n    }\n    return output;\n};\n\n/**\n *  EPub#getChapter(id, callback) -> undefined\n *  - id (String): Manifest id value for a chapter\n *  - callback (Function): callback function\n *\n *  Finds a chapter text for an id. Replaces image and link URL's, removes\n *  <head> etc. elements. Return only chapters with mime type application/xhtml+xml\n **/\nEPub.prototype.getChapter = function (id, callback) {\n    this.getChapterRaw(id, (function (err, str) {\n        if (err) {\n            callback(err);\n            return;\n        }\n\n        var i, len, path = this.rootFile.split(\"/\"), keys = Object.keys(this.manifest);\n        path.pop();\n\n        // remove linebreaks (no multi line matches in JS regex!)\n        str = str.replace(/\\r?\\n/g, \"\\u0000\");\n\n        // keep only <body> contents\n        str.replace(/<body[^>]*?>(.*)<\\/body[^>]*?>/i, function (o, d) {\n            str = d.trim();\n        });\n\n        // remove <script> blocks if any\n        str = str.replace(/<script[^>]*?>(.*?)<\\/script[^>]*?>/ig, function (o, s) {\n            return \"\";\n        });\n\n        // remove <style> blocks if any\n        str = str.replace(/<style[^>]*?>(.*?)<\\/style[^>]*?>/ig, function (o, s) {\n            return \"\";\n        });\n\n        // remove onEvent handlers\n        str = str.replace(/(\\s)(on\\w+)(\\s*=\\s*[\"']?[^\"'\\s>]*?[\"'\\s>])/g, function (o, a, b, c) {\n            return a + \"skip-\" + b + c;\n        });\n\n        // replace images\n        str = str.replace(/(\\ssrc\\s*=\\s*[\"']?)([^\"'\\s>]*?)([\"'\\s>])/g, (function (o, a, b, c) {\n            var img = path.concat([b]).join(\"/\").trim(),\n                element;\n\n            for (i = 0, len = keys.length; i < len; i++) {\n                if (this.manifest[keys[i]].href == img) {\n                    element = this.manifest[keys[i]];\n                    break;\n                }\n            }\n\n            // include only images from manifest\n            if (element) {\n                return a + this.imageroot + element.id + \"/\" + img + c;\n            } else {\n                return \"\";\n            }\n\n        }).bind(this));\n\n        // replace links\n        str = str.replace(/(\\shref\\s*=\\s*[\"']?)([^\"'\\s>]*?)([\"'\\s>])/g, (function (o, a, b, c) {\n            var linkparts = b && b.split(\"#\"),\n                link = path.concat([(linkparts.shift() || \"\")]).join(\"/\").trim(),\n                element;\n\n            for (i = 0, len = keys.length; i < len; i++) {\n                if (this.manifest[keys[i]].href.split(\"#\")[0] == link) {\n                    element = this.manifest[keys[i]];\n                    break;\n                }\n            }\n\n            if (linkparts.length) {\n                link  +=  \"#\" + linkparts.join(\"#\");\n            }\n\n            // include only images from manifest\n            if (element) {\n                return a + this.linkroot + element.id + \"/\" + link + c;\n            } else {\n                return a + b + c;\n            }\n\n        }).bind(this));\n\n        // bring back linebreaks\n        str = str.replace(/\\u0000/g, \"\\n\").trim();\n\n        callback(null, str);\n    }).bind(this));\n};\n\n\n/**\n *  EPub#getChapterRaw(id, callback) -> undefined\n *  - id (String): Manifest id value for a chapter\n *  - callback (Function): callback function\n *\n *  Returns the raw chapter text for an id.\n **/\nEPub.prototype.getChapterRaw = function (id, callback) {\n    if (this.manifest[id]) {\n\n        if (!(this.manifest[id]['media-type'] == \"application/xhtml+xml\" || this.manifest[id]['media-type'] == \"image/svg+xml\")) {\n            return callback(new Error(\"Invalid mime type for chapter\"));\n        }\n\n        this.zip.readFile(this.manifest[id].href, (function (err, data) {\n            if (err) {\n                callback(new Error(\"Reading archive failed\"));\n                return;\n            }\n\n            var str = data.toString(\"utf-8\");\n\n            callback(null, str);\n\n        }).bind(this));\n    } else {\n        callback(new Error(\"File not found\"));\n    }\n};\n\n\n/**\n *  EPub#getImage(id, callback) -> undefined\n *  - id (String): Manifest id value for an image\n *  - callback (Function): callback function\n *\n *  Finds an image for an id. Returns the image as Buffer. Callback gets\n *  an error object, image buffer and image content-type.\n *  Return only images with mime type image\n **/\nEPub.prototype.getImage = function (id, callback) {\n    if (this.manifest[id]) {\n\n        if ((this.manifest[id]['media-type'] || \"\").toLowerCase().trim().substr(0, 6)  !=  \"image/\") {\n            return callback(new Error(\"Invalid mime type for image\"));\n        }\n\n        this.getFile(id, callback);\n    } else {\n        callback(new Error(\"File not found\"));\n    }\n};\n\n\n/**\n *  EPub#getFile(id, callback) -> undefined\n *  - id (String): Manifest id value for a file\n *  - callback (Function): callback function\n *\n *  Finds a file for an id. Returns the file as Buffer. Callback gets\n *  an error object, file contents buffer and file content-type.\n **/\nEPub.prototype.getFile = function (id, callback) {\n    if (this.manifest[id]) {\n\n        this.zip.readFile(this.manifest[id].href, (function (err, data) {\n            if (err) {\n                callback(new Error(\"Reading archive failed\"));\n                return;\n            }\n\n            callback(null, data, this.manifest[id]['media-type']);\n        }).bind(this));\n    } else {\n        callback(new Error(\"File not found\"));\n    }\n};\n\n\nEPub.prototype.readFile = function(filename, options, callback_) {\n    var callback = arguments[arguments.length - 1];\n    \n    if (util.isFunction(options) || !options) {\n        this.zip.readFile(filename, callback);\n    } else if (util.isString(options)) {\n        // options is an encoding\n        this.zip.readFile(filename, function(err, data) {\n            if (err) {\n                callback(new Error('Reading archive failed'));\n                return;\n            }\n            callback(null, data.toString(options));\n        });\n    } else {\n        throw new TypeError('Bad arguments');\n    }\n};\n\n\n// Expose to the world\nmodule.exports = EPub;"}